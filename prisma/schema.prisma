generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(cuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  imageUrl     String?
  firstName    String?
  lastName     String?
  
  emailAddress String   @unique
  credit       Int      @default(150)

  userToProjects UserToProject[]
  questions Question[]
  stripeTransactions StripeTransaction[]
}

model Project {
  id           String   @id @default(cuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  name          String
  githubUrl     String
  deletedAt     DateTime?

  userToProjects UserToProject[]
  commits       Commit[]
  sourceCodeEmbeddings SourceCodeEmbedding[]
  questions Question[]
  meetings  Meeting[]
}

model SourceCodeEmbedding {
   id           String   @id @default(cuid())
   summaryEmbedding String? // JSON string of vector data
   sourceCode String
   fileName String
   summary String

   projectId String
   project Project @relation(fields: [projectId], references: [id])
}

model Meeting {
  id           String   @id @default(cuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  name String
  meetingUrl String

  projectId String
  project Project @relation(fields: [projectId], references: [id])

  status MeetingStatus @default(PROCESSING)
  issues Issue[]
}

model Issue {
  id           String   @id @default(cuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  start String
  end String
  gist String
  headline String
  summary String

  meetingId String
  meeting Meeting @relation(fields: [meetingId], references: [id], onDelete: Cascade)
}

model StripeTransaction {
  id           String   @id @default(cuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  userId String
  user User @relation(fields: [userId], references: [id])

  credits Int
}

enum MeetingStatus {
  PROCESSING
  COMPLETED
}

model Question {
  id           String   @id @default(cuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  question String
  answer  String
  fileReference Json?

  projectId String
  project Project @relation(fields: [projectId], references: [id])

  userId String
  user User @relation(fields: [userId], references: [id])
}

model UserToProject {
  id           String   @id @default(cuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  userId String
  projectId String

  user User @relation(fields: [userId], references: [id])
  project Project @relation(fields: [projectId], references: [id])

  @@unique([userId, projectId])
}

model Commit {
  id           String   @id @default(cuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  projectId String
  project Project @relation(fields: [projectId], references: [id])

  commitMessage String
  commitHash    String
  commitAuthorName String
  commitAuthorAvatar String
  commitDate DateTime
  summary String
}